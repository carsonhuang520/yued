{"version":3,"sources":["toast.test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"toast.test.js","sourceRoot":"..\\test","sourcesContent":["// const expect = chai.expect\r\n// import Vue from 'vue'\r\n// import Toast from '../src/toast'\r\n\r\n// Vue.config.productionTip = false\r\n// Vue.config.devtools = false\r\n\r\n// // describe it 是来自于 mocha 的库\r\n// // 断言是来自 chai 库\r\n// describe('Toast', () => {\r\n//   // BDD 行为驱动测试 mocha引入 describe 描述 Input 有哪些行为\r\n//   it('存在.', () => {\r\n//     expect(Toast).to.be.ok\r\n//   })\r\n\r\n//   describe('props', function() {\r\n//     it('测试 autoClose 属性', (done) => {\r\n//       // this.timeout(15000) // 可以设置超时时间，默认是 2000 ms\r\n//       const div = document.createElement('div')\r\n//       document.body.appendChild(div)\r\n//       const Constructor = Vue.extend(Toast)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           autoClose: true,\r\n//           autoCloseDelay: 1,\r\n//         },\r\n//       }).$mount(div)\r\n//       setTimeout(() => {\r\n//         expect(document.body.contains(vm.$el)).to.eq(false)\r\n//         done()\r\n//       }, 1500)\r\n//     })\r\n\r\n//     it('接受 closeButton', () => {\r\n//       const callback = sinon.fake()\r\n//       const Constructor = Vue.extend(Toast)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           closeButton: {\r\n//             text: '关闭',\r\n//             callback,\r\n//           },\r\n//         },\r\n//       }).$mount()\r\n//       const span = vm.$el.querySelector('.close')\r\n//       expect(span.textContent.trim()).to.eq('关闭')\r\n//       span.click()\r\n//       expect(callback).to.have.been.called\r\n//     })\r\n\r\n//     it('接受 enableHtml', () => {\r\n//       const Constructor = Vue.extend(Toast)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           enableHtml: true,\r\n//         },\r\n//       })\r\n//       vm.$slots.default = ['<strong id=\"test\">hello</strong>']\r\n//       vm.$mount()\r\n//       expect(vm.$el.querySelector('#test')).to.exist\r\n//     })\r\n\r\n//     it('接受 position', () => {\r\n//       const Constructor = Vue.extend(Toast)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           position: 'bottom',\r\n//         },\r\n//       }).$mount()\r\n//       expect(vm.$el.classList.contains('position-bottom')).to.eq(true)\r\n//     })\r\n//   })\r\n// })\r\n"]}