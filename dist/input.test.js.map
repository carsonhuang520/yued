{"version":3,"sources":["input.test.js"],"names":[],"mappingsfile":"input.test.js","sourceRoot":"..\\test","sourcesContent":["// const expect = chai.expect\r\n// import Vue from 'vue'\r\n// import Input from '../src/input'\r\n\r\n// Vue.config.productionTip = false\r\n// Vue.config.devtools = false\r\n\r\n// // describe it 是来自于 mocha 的库\r\n// // 断言是来自 chai 库\r\n// describe('Input', () => {\r\n//   // BDD 行为驱动测试 mocha引入 describe 描述 Input 有哪些行为\r\n//   it('存在.', () => {\r\n//     expect(Input).to.be.ok\r\n//   })\r\n//   // 测试 input 的属性\r\n//   describe('props', () => {\r\n//     it('设置 value.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           value: '1234',\r\n//         },\r\n//       }).$mount()\r\n//       const inputElement = vm.$el.querySelector('input')\r\n//       expect(inputElement.value).to.equal('1234')\r\n//       vm.$destroy()\r\n//     })\r\n//     it('设置 disabled.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           disabled: true,\r\n//         },\r\n//       }).$mount()\r\n//       const inputElement = vm.$el.querySelector('input')\r\n//       expect(inputElement.disabled).to.equal(true)\r\n//       vm.$destroy()\r\n//     })\r\n//     it('设置 readonly.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           readonly: true,\r\n//         },\r\n//       }).$mount()\r\n//       const inputElement = vm.$el.querySelector('input')\r\n//       expect(inputElement.readOnly).to.equal(true) // 注意这里的 readOnly, Only的o小写会测试通不过\r\n//       vm.$destroy()\r\n//     })\r\n//     it('设置 error.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({\r\n//         propsData: {\r\n//           error: 'wrong',\r\n//         },\r\n//       }).$mount()\r\n//       const useElement = vm.$el.querySelector('use')\r\n//       expect(useElement.getAttribute('xlink:href')).to.equal('#i-settings') // 测试错误图标\r\n//       const errorMessage = vm.$el.querySelector('.message-error')\r\n//       expect(errorMessage.innerText).to.equal('wrong') // 测试错误提示\r\n//       vm.$destroy()\r\n//     })\r\n//   })\r\n//   // 测试 input 的事件\r\n//   describe('events', () => {\r\n//     it('测试 change 事件.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({}).$mount()\r\n//       const callback = sinon.fake()\r\n//       vm.$on('change', callback)\r\n//       let event = new Event('change') // 自己创建一个 change 事件\r\n//       Object.defineProperty(event, 'target', {\r\n//         value: { value: 'hi' },\r\n//         enumerable: true,\r\n//       })\r\n//       let inputElement = vm.$el.querySelector('input')\r\n//       inputElement.dispatchEvent(event)\r\n//       expect(callback).to.have.been.calledWith('hi') // 回调被执行，传入的参数为 event\r\n//       vm.$destroy()\r\n//     })\r\n//     it('测试 input 事件.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({}).$mount()\r\n//       const callback = sinon.fake()\r\n//       vm.$on('input', callback)\r\n//       let event = new Event('input') // 自己创建一个 input 事件\r\n//       Object.defineProperty(event, 'target', {\r\n//         value: { value: 'hi' },\r\n//         enumerable: true,\r\n//       })\r\n//       let inputElement = vm.$el.querySelector('input')\r\n//       inputElement.dispatchEvent(event)\r\n//       expect(callback).to.have.been.calledWith('hi') // 回调被执行，传入的参数为 event\r\n//       vm.$destroy()\r\n//     })\r\n//     it('测试 focus 事件.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({}).$mount()\r\n//       const callback = sinon.fake()\r\n//       vm.$on('focus', callback)\r\n//       let event = new Event('focus') // 自己创建一个 focus 事件\r\n//       Object.defineProperty(event, 'target', {\r\n//         value: { value: 'hi' },\r\n//         enumerable: true,\r\n//       })\r\n//       let inputElement = vm.$el.querySelector('input')\r\n//       inputElement.dispatchEvent(event)\r\n//       expect(callback).to.have.been.calledWith('hi') // 回调被执行，传入的参数为 event\r\n//       vm.$destroy()\r\n//     })\r\n//     it('测试 blur 事件.', () => {\r\n//       const Constructor = Vue.extend(Input)\r\n//       const vm = new Constructor({}).$mount()\r\n//       const callback = sinon.fake()\r\n//       vm.$on('blur', callback)\r\n//       let event = new Event('blur') // 自己创建一个 blur 事件\r\n//       Object.defineProperty(event, 'target', {\r\n//         value: { value: 'hi' },\r\n//         enumerable: true,\r\n//       })\r\n//       let inputElement = vm.$el.querySelector('input')\r\n//       inputElement.dispatchEvent(event)\r\n//       expect(callback).to.have.been.calledWith('hi') // 回调被执行，传入的参数为 event\r\n//       vm.$destroy()\r\n//     })\r\n//   })\r\n// })\r\n"]}